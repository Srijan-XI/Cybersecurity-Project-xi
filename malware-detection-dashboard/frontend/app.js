// Application data from JSON
const appData = {
    "system_stats": {
        "files_analyzed_today": 247,
        "malware_detected": 18,
        "system_uptime": "7d 14h 23m",
        "detection_accuracy": 98.7,
        "total_files_processed": 15420
    },
    "recent_activity": [
        {"time": "14:32", "file": "suspicious_app.exe", "verdict": "Malware", "confidence": 94.2},
        {"time": "14:28", "file": "document.pdf", "verdict": "Benign", "confidence": 96.8},
        {"time": "14:25", "file": "installer.msi", "verdict": "Suspicious", "confidence": 72.3},
        {"time": "14:22", "file": "system_tool.dll", "verdict": "Benign", "confidence": 89.1},
        {"time": "14:19", "file": "malware_sample.exe", "verdict": "Malware", "confidence": 99.1}
    ],
    "threat_distribution": {
        "Safe": 68,
        "Suspicious": 12,
        "Likely Malware": 8,
        "Confirmed Malware": 12
    },
    "analysis_timeline": [
        {"hour": "10:00", "count": 15},
        {"hour": "11:00", "count": 23},
        {"hour": "12:00", "count": 31},
        {"hour": "13:00", "count": 28},
        {"hour": "14:00", "count": 35},
        {"hour": "15:00", "count": 12}
    ],
    "sample_analysis": {
        "filename": "suspicious_document.exe",
        "filesize": "2.4 MB",
        "md5": "d41d8cd98f00b204e9800998ecf8427e",
        "sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
        "verdict": "Malware",
        "confidence": 94.7,
        "threat_level": "High",
        "model_used": "Random Forest",
        "iocs": [
            "Suspicious API calls detected",
            "Network communication patterns",
            "Registry modification attempts",
            "Process injection techniques"
        ],
        "recommendations": [
            "QUARANTINE: Isolate file immediately",
            "SCAN: Perform full system scan",
            "MONITOR: Check for lateral movement",
            "INVESTIGATE: Review system logs"
        ]
    },
    "feature_importance": [
        {"feature": "PE Header Entropy", "importance": 0.15},
        {"feature": "Suspicious API Calls", "importance": 0.12},
        {"feature": "Section Characteristics", "importance": 0.10},
        {"feature": "String Patterns", "importance": 0.09},
        {"feature": "Import Table Analysis", "importance": 0.08}
    ],
    "component_status": {
        "PE Analyzer": "Online",
        "ML Models": "Online", 
        "Sandbox": "Online",
        "Threat Intel": "Online",
        "Database": "Online"
    },
    "ml_models": [
        {"name": "Random Forest", "accuracy": 99.1, "status": "Ready"},
        {"name": "SVM", "accuracy": 98.7, "status": "Ready"},
        {"name": "Gradient Boosting", "accuracy": 99.3, "status": "Ready"},
        {"name": "CNN Deep Learning", "accuracy": 97.8, "status": "Training"}
    ]
};

// Global variables
let threatChart = null;
let timelineChart = null;
let featureChart = null;
let currentAnalysisFile = null;
let batchFiles = [];
let batchResults = [];

// Initialize application
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    setupNavigation();
    setupFileUploads();
    setupDashboard();
    setupSystemStatus();
    setupReports();
    setupNotifications();
}

// Navigation functionality
function setupNavigation() {
    const navTabs = document.querySelectorAll('.nav-tab');
    const tabContents = document.querySelectorAll('.tab-content');

    navTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const targetTab = tab.getAttribute('data-tab');
            
            // Remove active class from all tabs and contents
            navTabs.forEach(t => t.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            // Add active class to clicked tab and corresponding content
            tab.classList.add('active');
            document.getElementById(targetTab).classList.add('active');
            
            // Initialize charts when dashboard is shown
            if (targetTab === 'dashboard') {
                setTimeout(initializeCharts, 100);
            }
        });
    });
}

// File upload functionality
function setupFileUploads() {
    const fileUpload = document.getElementById('fileUpload');
    const fileInput = document.getElementById('fileInput');
    const batchUpload = document.getElementById('batchUpload');
    const batchFileInput = document.getElementById('batchFileInput');
    const startAnalysisBtn = document.getElementById('startAnalysis');
    const startBatchBtn = document.getElementById('startBatchAnalysis');

    // Single file upload
    fileUpload.addEventListener('click', () => fileInput.click());
    fileUpload.addEventListener('dragover', handleDragOver);
    fileUpload.addEventListener('dragleave', handleDragLeave);
    fileUpload.addEventListener('drop', handleFileDrop);
    
    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleFileSelect(e.target.files[0]);
        }
    });

    startAnalysisBtn.addEventListener('click', startFileAnalysis);

    // Batch file upload
    batchUpload.addEventListener('click', () => batchFileInput.click());
    batchUpload.addEventListener('dragover', handleDragOver);
    batchUpload.addEventListener('dragleave', handleDragLeave);
    batchUpload.addEventListener('drop', handleBatchFileDrop);
    
    batchFileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleBatchFileSelect(Array.from(e.target.files));
        }
    });

    startBatchBtn.addEventListener('click', startBatchAnalysis);

    // Export buttons
    document.getElementById('exportCsv').addEventListener('click', () => exportResults('csv'));
    document.getElementById('exportJson').addEventListener('click', () => exportResults('json'));
}

function handleDragOver(e) {
    e.preventDefault();
    e.currentTarget.classList.add('dragover');
}

function handleDragLeave(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('dragover');
}

function handleFileDrop(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('dragover');
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
        handleFileSelect(files[0]);
    }
}

function handleBatchFileDrop(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('dragover');
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
        handleBatchFileSelect(files);
    }
}

function handleFileSelect(file) {
    currentAnalysisFile = file;
    document.getElementById('startAnalysis').disabled = false;
    
    // Update upload area to show selected file
    const uploadArea = document.getElementById('fileUpload');
    uploadArea.innerHTML = `
        <i class="fas fa-file upload-icon"></i>
        <p>Selected: <strong>${file.name}</strong></p>
        <p><small>Size: ${formatFileSize(file.size)}</small></p>
    `;
    
    showNotification('File selected successfully', 'success');
}

function handleBatchFileSelect(files) {
    batchFiles = files;
    document.getElementById('startBatchAnalysis').disabled = false;
    
    // Update upload area to show selected files
    const uploadArea = document.getElementById('batchUpload');
    uploadArea.innerHTML = `
        <i class="fas fa-files upload-icon"></i>
        <p>Selected: <strong>${files.length} files</strong></p>
        <p><small>Total size: ${formatFileSize(files.reduce((total, file) => total + file.size, 0))}</small></p>
    `;
    
    showNotification(`${files.length} files selected for batch analysis`, 'success');
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// File analysis functionality
function startFileAnalysis() {
    if (!currentAnalysisFile) return;
    
    const resultsSection = document.getElementById('resultsSection');
    const progressSection = document.getElementById('analysisProgress');
    const resultsContent = document.getElementById('analysisResults');
    
    resultsSection.style.display = 'block';
    progressSection.style.display = 'block';
    resultsContent.style.display = 'none';
    
    // Simulate analysis progress
    simulateAnalysisProgress().then(() => {
        progressSection.style.display = 'none';
        displayAnalysisResults();
        resultsContent.style.display = 'block';
    });
}

function simulateAnalysisProgress() {
    return new Promise((resolve) => {
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        const steps = [
            { progress: 20, text: 'Extracting PE headers...' },
            { progress: 40, text: 'Analyzing API calls...' },
            { progress: 60, text: 'Running ML model...' },
            { progress: 80, text: 'Generating IoCs...' },
            { progress: 100, text: 'Analysis complete!' }
        ];
        
        let currentStep = 0;
        
        function updateProgress() {
            if (currentStep < steps.length) {
                const step = steps[currentStep];
                progressFill.style.width = step.progress + '%';
                progressText.textContent = step.text;
                currentStep++;
                setTimeout(updateProgress, 800);
            } else {
                resolve();
            }
        }
        
        updateProgress();
    });
}

function displayAnalysisResults() {
    // Generate realistic analysis results
    const analysis = generateAnalysisResult(currentAnalysisFile);
    
    // Display file information
    const fileInfo = document.getElementById('fileInfo');
    fileInfo.innerHTML = `
        <div class="info-item">
            <div class="info-label">Filename</div>
            <div class="info-value">${analysis.filename}</div>
        </div>
        <div class="info-item">
            <div class="info-label">File Size</div>
            <div class="info-value">${analysis.filesize}</div>
        </div>
        <div class="info-item">
            <div class="info-label">MD5 Hash</div>
            <div class="info-value">${analysis.md5}</div>
        </div>
        <div class="info-item">
            <div class="info-label">SHA256 Hash</div>
            <div class="info-value">${analysis.sha256}</div>
        </div>
    `;
    
    // Display verdict
    const verdictCard = document.getElementById('verdictCard');
    verdictCard.innerHTML = `
        <h3 class="verdict-title ${analysis.verdict.toLowerCase()}">${analysis.verdict}</h3>
        <p class="confidence-score">Confidence: ${analysis.confidence}%</p>
        <p>Threat Level: <strong>${analysis.threat_level}</strong></p>
        <p>Model Used: <strong>${analysis.model_used}</strong></p>
    `;
    
    // Display IoCs
    const iocsList = document.getElementById('iocsList');
    iocsList.innerHTML = analysis.iocs.map(ioc => `<li>${ioc}</li>`).join('');
    
    // Display recommendations
    const recommendationsList = document.getElementById('recommendationsList');
    recommendationsList.innerHTML = analysis.recommendations.map(rec => `<li>${rec}</li>`).join('');
    
    // Create feature importance chart
    createFeatureImportanceChart();
    
    showNotification('File analysis completed successfully', 'success');
}

function generateAnalysisResult(file) {
    const verdicts = ['Malware', 'Benign', 'Suspicious'];
    const threatLevels = ['Low', 'Medium', 'High', 'Critical'];
    const models = ['Random Forest', 'SVM', 'Gradient Boosting', 'CNN'];
    
    const verdict = verdicts[Math.floor(Math.random() * verdicts.length)];
    const confidence = Math.floor(Math.random() * 30) + 70; // 70-100%
    
    return {
        filename: file.name,
        filesize: formatFileSize(file.size),
        md5: generateHash(32),
        sha256: generateHash(64),
        verdict: verdict,
        confidence: confidence,
        threat_level: verdict === 'Malware' ? threatLevels[Math.floor(Math.random() * 2) + 2] : 
                     verdict === 'Suspicious' ? 'Medium' : 'Low',
        model_used: models[Math.floor(Math.random() * models.length)],
        iocs: appData.sample_analysis.iocs,
        recommendations: verdict === 'Malware' ? appData.sample_analysis.recommendations :
                        verdict === 'Suspicious' ? ['MONITOR: Continue monitoring', 'SCAN: Additional scans recommended'] :
                        ['ALLOW: File appears safe', 'MONITOR: Routine monitoring']
    };
}

function generateHash(length) {
    const chars = '0123456789abcdef';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

// Batch analysis functionality
function startBatchAnalysis() {
    if (batchFiles.length === 0) return;
    
    const progressSection = document.getElementById('batchProgress');
    const resultsSection = document.getElementById('batchResults');
    
    progressSection.style.display = 'block';
    resultsSection.style.display = 'none';
    
    batchResults = [];
    
    simulateBatchAnalysis().then(() => {
        progressSection.style.display = 'none';
        displayBatchResults();
        resultsSection.style.display = 'block';
    });
}

function simulateBatchAnalysis() {
    return new Promise((resolve) => {
        const progressFill = document.getElementById('batchProgressFill');
        const progressText = document.getElementById('batchProgressText');
        
        let processedFiles = 0;
        
        function processNextFile() {
            if (processedFiles < batchFiles.length) {
                const file = batchFiles[processedFiles];
                const progress = ((processedFiles + 1) / batchFiles.length) * 100;
                
                progressFill.style.width = progress + '%';
                progressText.textContent = `${processedFiles + 1} / ${batchFiles.length}`;
                
                // Generate result for this file
                const result = {
                    ...generateAnalysisResult(file),
                    analysisTime: Math.floor(Math.random() * 5) + 2 + 's'
                };
                batchResults.push(result);
                
                processedFiles++;
                setTimeout(processNextFile, Math.random() * 1000 + 500);
            } else {
                resolve();
            }
        }
        
        processNextFile();
    });
}

function displayBatchResults() {
    // Display summary statistics
    const stats = calculateBatchStats();
    const summaryStats = document.getElementById('summaryStats');
    summaryStats.innerHTML = `
        <div class="summary-stat">
            <h5>Total Files</h5>
            <p>${stats.total}</p>
        </div>
        <div class="summary-stat">
            <h5>Malware</h5>
            <p style="color: var(--cyber-red)">${stats.malware}</p>
        </div>
        <div class="summary-stat">
            <h5>Benign</h5>
            <p style="color: var(--cyber-green)">${stats.benign}</p>
        </div>
        <div class="summary-stat">
            <h5>Suspicious</h5>
            <p style="color: var(--cyber-orange)">${stats.suspicious}</p>
        </div>
        <div class="summary-stat">
            <h5>Avg Confidence</h5>
            <p>${stats.avgConfidence}%</p>
        </div>
    `;
    
    // Display results table
    const tableBody = document.getElementById('batchTableBody');
    tableBody.innerHTML = batchResults.map(result => `
        <tr>
            <td>${result.filename}</td>
            <td>${result.filesize}</td>
            <td><span class="verdict-cell ${result.verdict.toLowerCase()}">${result.verdict}</span></td>
            <td>${result.confidence}%</td>
            <td>${result.threat_level}</td>
            <td>${result.analysisTime}</td>
        </tr>
    `).join('');
    
    showNotification(`Batch analysis completed: ${batchResults.length} files processed`, 'success');
}

function calculateBatchStats() {
    const stats = {
        total: batchResults.length,
        malware: 0,
        benign: 0,
        suspicious: 0,
        totalConfidence: 0
    };
    
    batchResults.forEach(result => {
        stats[result.verdict.toLowerCase()]++;
        stats.totalConfidence += result.confidence;
    });
    
    stats.avgConfidence = Math.round(stats.totalConfidence / stats.total);
    
    return stats;
}

function exportResults(format) {
    const data = batchResults.map(result => ({
        filename: result.filename,
        verdict: result.verdict,
        confidence: result.confidence,
        threat_level: result.threat_level,
        model_used: result.model_used,
        analysis_time: result.analysisTime
    }));
    
    let content, mimeType, filename;
    
    if (format === 'csv') {
        content = convertToCSV(data);
        mimeType = 'text/csv';
        filename = 'batch_analysis_results.csv';
    } else {
        content = JSON.stringify(data, null, 2);
        mimeType = 'application/json';
        filename = 'batch_analysis_results.json';
    }
    
    downloadFile(content, mimeType, filename);
    showNotification(`Results exported as ${format.toUpperCase()}`, 'success');
}

function convertToCSV(data) {
    const headers = Object.keys(data[0]);
    const csvContent = [
        headers.join(','),
        ...data.map(row => headers.map(header => `"${row[header]}"`).join(','))
    ].join('\n');
    
    return csvContent;
}

function downloadFile(content, mimeType, filename) {
    const blob = new Blob([content], { type: mimeType });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
}

// Dashboard functionality
function setupDashboard() {
    populateActivityFeed();
    // Charts will be initialized when dashboard tab is active
}

function populateActivityFeed() {
    const activityFeed = document.getElementById('activity-feed');
    activityFeed.innerHTML = appData.recent_activity.map(item => `
        <div class="activity-item">
            <div class="activity-info">
                <div class="activity-time">${item.time}</div>
                <div class="activity-file">${item.file}</div>
            </div>
            <div class="activity-verdict ${item.verdict.toLowerCase()}">${item.verdict}</div>
        </div>
    `).join('');
}

function initializeCharts() {
    if (threatChart) threatChart.destroy();
    if (timelineChart) timelineChart.destroy();
    
    createThreatDistributionChart();
    createTimelineChart();
}

function createThreatDistributionChart() {
    const ctx = document.getElementById('threatChart').getContext('2d');
    const data = appData.threat_distribution;
    
    threatChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: Object.keys(data),
            datasets: [{
                data: Object.values(data),
                backgroundColor: ['#28a745', '#fd7e14', '#dc3545', '#6f42c1'],
                borderWidth: 2,
                borderColor: '#1e1e1e'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        color: '#f5f5f5',
                        padding: 15
                    }
                }
            }
        }
    });
}

function createTimelineChart() {
    const ctx = document.getElementById('timelineChart').getContext('2d');
    const data = appData.analysis_timeline;
    
    timelineChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: data.map(item => item.hour),
            datasets: [{
                label: 'Files Analyzed',
                data: data.map(item => item.count),
                borderColor: '#007acc',
                backgroundColor: 'rgba(0, 122, 204, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    labels: {
                        color: '#f5f5f5'
                    }
                }
            },
            scales: {
                x: {
                    ticks: {
                        color: '#f5f5f5'
                    },
                    grid: {
                        color: 'rgba(255, 255, 255, 0.1)'
                    }
                },
                y: {
                    ticks: {
                        color: '#f5f5f5'
                    },
                    grid: {
                        color: 'rgba(255, 255, 255, 0.1)'
                    }
                }
            }
        }
    });
}

function createFeatureImportanceChart() {
    const ctx = document.getElementById('featureChart').getContext('2d');
    const data = appData.feature_importance;
    
    if (featureChart) featureChart.destroy();
    
    featureChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: data.map(item => item.feature),
            datasets: [{
                label: 'Importance',
                data: data.map(item => item.importance),
                backgroundColor: '#007acc',
                borderColor: '#005c99',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    labels: {
                        color: '#f5f5f5'
                    }
                }
            },
            scales: {
                x: {
                    ticks: {
                        color: '#f5f5f5',
                        maxRotation: 45
                    },
                    grid: {
                        color: 'rgba(255, 255, 255, 0.1)'
                    }
                },
                y: {
                    ticks: {
                        color: '#f5f5f5'
                    },
                    grid: {
                        color: 'rgba(255, 255, 255, 0.1)'
                    }
                }
            }
        }
    });
}

// System status functionality
function setupSystemStatus() {
    populateComponents();
    populateModels();
}

function populateComponents() {
    const componentsGrid = document.getElementById('componentsGrid');
    componentsGrid.innerHTML = Object.entries(appData.component_status).map(([name, status]) => `
        <div class="component-card">
            <div class="component-name">${name}</div>
            <div class="component-status status-${status.toLowerCase()}">${status}</div>
        </div>
    `).join('');
}

function populateModels() {
    const modelsGrid = document.getElementById('modelsGrid');
    modelsGrid.innerHTML = appData.ml_models.map(model => `
        <div class="model-card">
            <div>
                <div class="model-name">${model.name}</div>
                <div style="font-size: var(--font-size-sm); color: var(--color-text-secondary);">
                    Accuracy: ${model.accuracy}%
                </div>
            </div>
            <div class="model-status status-${model.status.toLowerCase()}">${model.status}</div>
        </div>
    `).join('');
}

// Reports functionality
function setupReports() {
    populateReportsTable();
    setupReportFilters();
}

function populateReportsTable() {
    const tableBody = document.getElementById('reportsTableBody');
    const reports = generateSampleReports();
    
    tableBody.innerHTML = reports.map(report => `
        <tr>
            <td>${report.date}</td>
            <td>${report.filename}</td>
            <td><span class="verdict-cell ${report.verdict.toLowerCase()}">${report.verdict}</span></td>
            <td>${report.confidence}%</td>
            <td>${report.model}</td>
            <td>
                <button class="btn btn--sm btn--secondary" onclick="viewReport('${report.id}')">
                    <i class="fas fa-eye"></i> View
                </button>
            </td>
        </tr>
    `).join('');
}

function generateSampleReports() {
    const reports = [];
    const verdicts = ['Malware', 'Benign', 'Suspicious'];
    const models = ['Random Forest', 'SVM', 'Gradient Boosting'];
    const filenames = ['app.exe', 'document.pdf', 'installer.msi', 'script.js', 'library.dll'];
    
    for (let i = 0; i < 15; i++) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        
        reports.push({
            id: `report_${i}`,
            date: date.toLocaleDateString(),
            filename: filenames[Math.floor(Math.random() * filenames.length)],
            verdict: verdicts[Math.floor(Math.random() * verdicts.length)],
            confidence: Math.floor(Math.random() * 30) + 70,
            model: models[Math.floor(Math.random() * models.length)]
        });
    }
    
    return reports;
}

function setupReportFilters() {
    const applyFiltersBtn = document.getElementById('applyFilters');
    applyFiltersBtn.addEventListener('click', applyReportFilters);
}

function applyReportFilters() {
    showNotification('Report filters applied', 'info');
    // In a real application, this would filter the reports table
}

function viewReport(reportId) {
    showNotification(`Viewing detailed report: ${reportId}`, 'info');
    // In a real application, this would open a detailed report view
}

// Notification system
function setupNotifications() {
    // Notifications are handled by the showNotification function
}

function showNotification(message, type = 'info', duration = 3000) {
    const notification = document.getElementById('notification');
    const icon = notification.querySelector('.notification-icon');
    const messageSpan = notification.querySelector('.notification-message');
    
    // Set notification content
    messageSpan.textContent = message;
    
    // Set icon based on type
    icon.className = `notification-icon ${type} fas`;
    switch(type) {
        case 'success':
            icon.classList.add('fa-check-circle');
            break;
        case 'error':
            icon.classList.add('fa-exclamation-triangle');
            break;
        case 'info':
        default:
            icon.classList.add('fa-info-circle');
            break;
    }
    
    // Set notification type class
    notification.className = `notification ${type}`;
    notification.style.display = 'block';
    
    // Auto hide after duration
    setTimeout(() => {
        notification.style.display = 'none';
    }, duration);
}

// Initialize dashboard charts when page loads
setTimeout(() => {
    initializeCharts();
}, 500);